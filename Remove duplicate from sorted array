Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.
________________________________________________________________________________________________________________________________
Algorithm:

1. Initialize a variable k to 1. This variable will represent the number of unique elements, and we start with one element at index 0.

2. Iterate through the array nums from the second element (index 1) to the end.

3. For each element at index i, compare it with the previous element at index i-1.

4. If nums[i] is different from nums[i-1], it indicates a unique element. In this case:

   Update the k-th element of the array nums with the value of nums[i]. This step moves the unique elements to the beginning of the array while preserving their order.

   Increment k by 1 to reflect the increasing count of unique elements.

5. Continue this process until you've processed the entire array.

6. Return the value of k. This value represents the number of unique elements, and the first k elements in the array nums will contain the unique elements.

This algorithm is efficient and works in O(n) time complexity, where n is the length of the input array nums. It modifies the array in-place and returns the count of unique elements.
___________________________________________________________________________________________________________________________________
pseudo code:
function removeDuplicates(nums):
    if nums is empty:
        return 0

    k = 1  // Initialize the number of unique elements as 1

    for i from 1 to len(nums) - 1:
        if nums[i] != nums[i - 1]:
            nums[k] = nums[i]  // Move unique elements to the beginning of the array
            k = k + 1

    return k  // Number of unique elements
--------------------------------------------------------------------------------------------------------------------------------
Solution is here::
def removeDuplicates(nums):
    if not nums:
        return 0

    k = 1  # Initialize the number of unique elements as 1

    for i in range(1, len(nums)):
        if nums[i] != nums[i - 1]:
            nums[k] = nums[i]  # Move unique elements to the beginning of the array
            k += 1

    return k
